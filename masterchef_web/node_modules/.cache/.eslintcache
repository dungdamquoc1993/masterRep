[{"/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/index.tsx":"1","/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/App.tsx":"2","/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/connectors.ts":"3","/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/utils/getContract.js":"4","/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/utils/constant.js":"5"},{"size":536,"mtime":1655954186802,"results":"6","hashOfConfig":"7"},{"size":7726,"mtime":1655982166169,"results":"8","hashOfConfig":"7"},{"size":162,"mtime":1655954189928,"results":"9","hashOfConfig":"7"},{"size":879,"mtime":1655954188553,"results":"10","hashOfConfig":"7"},{"size":642,"mtime":1655960075899,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12z25ys",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/index.tsx",[],[],"/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/App.tsx",["28","29"],[],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { useWeb3React } from '@web3-react/core'\nimport { Injected } from './connectors'\nimport { getContract } from './utils/getContract'\nimport { MasterChef, } from './utils/constant'\nconst { parseUnits } = require(\"ethers/lib/utils\");\n\n\nfunction App() {\n  let [userAccount, setUserAccount] = useState<any>('')\n  let [samBalance, setSamBalance] = useState<any>(0)\n  let [samAllowBal, setSamAllowBal] = useState<any>(0)\n  let [RDXPending, setRDXPending] = useState<any>(0)\n  let [userRDXBal, setUserRDXBal] = useState<any>(0)\n  const { activate, account } = useWeb3React();\n  const connectWallet = async () => {\n    await activate(Injected)\n  }\n\n  const getUserRDXBal = async () => {\n    const contract = await getContract('RDX')\n    if (contract != null && userAccount) {\n      const balance = await contract.balanceOf(userAccount)\n      setUserRDXBal(parseInt(balance.toString()) / 10 ** 12)\n    }\n  }\n\n  const getSamAllowBalance = async () => {\n    const contract = await getContract('SAM')\n    if (contract != null && userAccount) {\n      const allowBalance = await contract.allowance(userAccount, MasterChef.contractAddress)\n      const currentBalance = await contract.balanceOf(userAccount)\n      const availableAmount = (currentBalance - allowBalance >= 0) ? allowBalance : currentBalance\n      // console.log(currentBalance - allowBalance)\n      // console.log('allow balalnce: ', allowBalance.toString())\n      // console.log('current ballance', currentBalance.toString())\n      // console.log('?', availableAmount.toString())\n      setSamAllowBal(parseInt((availableAmount / 10 ** 12).toString()))\n    }\n  }\n\n  const getSamDepositBalance = async () => {\n    const contract = await getContract('MSC')\n    if (contract != null) {\n      const balance = await contract.getUserAmountDeposit(1)\n      setSamBalance(parseInt(balance.toString()) / 10 ** 12)\n    } else {\n      alert('something went wrong')\n    }\n  }\n\n  const getRDXPending = async () => {\n    const contract = await getContract('MSC')\n    if (contract != null) {\n      const RDXPending = await contract.pendingRedDot(1, userAccount)\n      setRDXPending(parseInt(RDXPending.toString()) / 10 ** 12)\n    } else {\n      alert('something went wrong')\n    }\n  }\n\n  const [samAllowAmount, setSamAllowAmount] = useState<any>(0)\n  const approveSam = async () => { // should require userAccount\n    const samContract = await getContract('SAM')\n    if (samContract != null) {\n      const approveSuccess = await samContract.approve(MasterChef.contractAddress, parseUnits(samAllowAmount.toString(), 12))\n      if (approveSuccess) {\n        alert('please wait about 30-45 seconds to deposit Sam')\n      }\n    }\n  }\n  const [samDepositAmount, setSamDepositAmount] = useState<any>(0)\n  const depositSam = async () => {\n    const mscContract = await getContract('MSC')\n    const samContract = await getContract('SAM')\n    if (mscContract != null && samContract != null) {\n      if (!userAccount) {\n        alert('please connect your meta mask wallet before do this stuff')\n        return\n      }\n      const availableSamToDeposit = await samContract.allowance(userAccount, MasterChef.contractAddress)\n      if (parseInt((availableSamToDeposit / 10 ** 12).toString()) >= samDepositAmount) {\n        const tx = await mscContract.deposit(1, parseUnits(samDepositAmount.toString(), 12))\n        tx?.wait();\n        alert('deposit success')\n      } else {\n        alert('your balance is insufficient')\n      }\n    }\n  }\n  const [samWithdrawAmount, setSamWithdrawAmount] = useState<any>(0)\n  const withdrawSam = async () => {\n    const mscContract = await getContract('MSC')\n    if (mscContract != null) {\n      const availableAmount = await mscContract.getUserAmountDeposit(1)\n      if (samWithdrawAmount - (parseInt(availableAmount.toString()) / 10 ** 12) <= 0) {\n        try {\n          await mscContract.withdraw(1, parseUnits(samWithdrawAmount.toString(), 12))\n          alert('withdraw success wait 45-60 seconds to receive sam')\n        } catch (error) {\n          alert('system caught trouble')\n        }\n      } else {\n        alert('withdraw not good')\n      }\n    }\n  }\n\n  const [claimRewardAmount, setClaimRewardAmount] = useState<any>(0)\n  const claimReward = async () => {\n    const mscContract = await getContract('MSC')\n    if (mscContract != null) {\n      const pendingRDX = await mscContract.pendingRedDot(1, userAccount)\n      let claimAmountInSol = parseUnits(claimRewardAmount.toString(), 12)\n      if (pendingRDX - claimAmountInSol >= 0) {\n        await mscContract.claimReward(1, parseUnits(claimRewardAmount.toString(), 12))\n        alert('claim reward success wait 45-60 secons to receive reward')\n      } else {\n        alert('insufficinent balalnce')\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (userAccount) {\n      getSamDepositBalance()\n      getSamAllowBalance()\n      getRDXPending()\n      getUserRDXBal()\n    }\n  }, [userAccount])\n  useEffect(() => {\n    if (account) {\n      setUserAccount(account)\n      if (window.localStorage.getItem('userAccount') !== account) {\n        window.localStorage.setItem('userAccount', account)\n      }\n    }\n  }, [account])\n  useEffect(() => {\n    if (window.localStorage.getItem('userAccount')) {\n      connectWallet()\n    }\n  }, [])\n\n  return (\n    <div style={{ padding: 20 }}>\n      <main style={{ minHeight: 200, padding: 50, flex: 1, flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>\n        <h1 style={{ color: 'blue' }}>\n          collect RDX by staking SAM Coin\n        </h1>\n        <p>\n          Your account: {userAccount}\n        </p>\n        <p>Your RDX Balance: {userRDXBal} RDX</p>\n\n        <button type=\"button\" onClick={connectWallet} style={{ marginTop: 20 }} >\n          <p>\n            Connect Wallet\n          </p>\n        </button>\n\n        <div style={{ flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'flex-start', width: '40%' }}>\n          <p> Approve some Sam to deposit</p>\n          <input style={{ marginRight: 10 }} type='number' onChange={(e) => setSamAllowAmount(e.target.value)} />\n          <button type=\"button\" onClick={approveSam} >\n            <p>Submit</p>\n          </button>\n          <h3>Sam available to deposit:{samAllowBal} SAM</h3>\n        </div>\n        <div style={{ flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'flex-start', width: '40%' }}>\n          <p > Deposit Sam:</p>\n          <input style={{ marginRight: 10 }} type='number' onChange={(e) => setSamDepositAmount(e.target.value)} />\n          <button type=\"button\" onClick={depositSam} >\n            <p>Submit</p>\n          </button>\n        </div>\n        <div style={{ flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'flex-start', width: '40%' }}>\n          <p > Withdraw Sam:</p>\n          <input style={{ marginRight: 10 }} type='number' onChange={(e) => setSamWithdrawAmount(e.target.value)} />\n          <button type=\"button\" onClick={withdrawSam} >\n            <p>Submit</p>\n          </button>\n          <h3>Your balance Sam in Pool: {samBalance} SAM</h3>\n        </div>\n\n\n        <div style={{ flexDirection: 'row', alignItems: 'flex-start', justifyContent: 'flex-start', width: '40%' }}>\n          <p > claim reward (make sure your balance is sufficient): </p>\n          <input style={{ marginRight: 10 }} type='number' onChange={(e) => setClaimRewardAmount(e.target.value)} />\n          <button type=\"button\" onClick={claimReward} >\n            <p>Submit</p>\n          </button>\n          <h3>\n            Your Pending Reddot token reward: {RDXPending} RDX\n          </h3>\n        </div>\n      </main>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/connectors.ts",[],[],"/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/utils/getContract.js",[],[],"/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/utils/constant.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":132,"column":6,"nodeType":"32","endLine":132,"endColumn":19,"suggestions":"33"},{"ruleId":"30","severity":1,"message":"34","line":145,"column":6,"nodeType":"32","endLine":145,"endColumn":8,"suggestions":"35"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getRDXPending', 'getSamAllowBalance', and 'getUserRDXBal'. Either include them or remove the dependency array.","ArrayExpression",["36"],"React Hook useEffect has a missing dependency: 'connectWallet'. Either include it or remove the dependency array.",["37"],{"desc":"38","fix":"39"},{"desc":"40","fix":"41"},"Update the dependencies array to be: [getRDXPending, getSamAllowBalance, getUserRDXBal, userAccount]",{"range":"42","text":"43"},"Update the dependencies array to be: [connectWallet]",{"range":"44","text":"45"},[4969,4982],"[getRDXPending, getSamAllowBalance, getUserRDXBal, userAccount]",[5318,5320],"[connectWallet]"]